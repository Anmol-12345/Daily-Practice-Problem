class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> state(n, 0);  // state[i] = 0: not visited, 1: visiting, 2: safe
        vector<int> result;
        
        // Helper function for DFS
        function<bool(int)> dfs = [&](int node) {
            if (state[node] == 1) return false;  // cycle detected
            if (state[node] == 2) return true;   // already processed, safe
            
            state[node] = 1;  // mark as visiting
            
            // Explore all neighbors of the current node
            for (int neighbor : graph[node]) {
                if (!dfs(neighbor)) {
                    return false;  // if any neighbor is unsafe, return false
                }
            }
            
            state[node] = 2;  // mark as safe after processing all neighbors
            return true;
        };
        
        // Run DFS from each node
        for (int i = 0; i < n; i++) {
            if (dfs(i)) {
                result.push_back(i);
            }
        }
        
        return result;
    }
};
